#!/usr/bin/env python3

"""Juju schema.json -> OpenAPI converter.

This is a quick and hacky tool that reads the `schema.json` generated by the Juju
project that describes it's APIs, and naively converts it into a roughly conformant
OpenAPI 3.1 spec.

The purpose of this is only to provide a reference during the design on the new
RESTful Juju API.

Because the formats do not marry very well, it makes some assumptions, and takes some
shortcuts:

- It only covers the "client" facade group for Juju
- URLs are naively generated as `/<facade_name>/<facadeMethod>`
- All methods are GET methods
- All methods only specify a single HTTP 200 response
- All parameters are sent in the request body, as per current Juju API
"""

import argparse
import json
from pathlib import Path

import yaml


def _lower_first(st: str) -> str:
    """Takes a string and returns that same string, but with a lowercase first letter."""
    return st[0].lower() + st[1:]


def _clean_description(d: str) -> str:
    """Cleans the descriptions that are part of the Juju facade schema.

    This method takes the given string and transforms newlines to spaces, removes the first
    word, and then makes the first letter of the resulting string uppercase.
    """
    # If empty string just return
    if not d:
        return d
    # Transform newlines to spaces
    d = d.replace("\n", " ")
    # Remove first word
    d = d.split(" ", 1)[1]
    # Uppercase first letter and return
    return d[0].upper() + d[1:]


def _load_facades_file(filename: str) -> dict:
    """Load a generated Juju facade schema into a Python dict."""
    # Read the file as a string
    facadesRaw = Path(filename).read_text()
    # Replace the jsonschema references ahead of time
    facadesRaw = facadesRaw.replace("definitions/", "components/schemas/")
    # Parse the facades and return them
    return json.loads(facadesRaw)


def _generate_spec(facadesFile: str) -> dict:
    """Takes Juju facade schema as input and returns an OpenAPI spec."""

    # Template for the generated OpenAPI specification
    spec = {
        "openapi": "3.1.0",
        "info": {
            "title": "Juju Client Facade/OpenAPI Generation",
            "summary": "Naive conversion from Juju's schema.json to an OpenAPI spec.",
            "description": "Naive conversion from Juju's schema.json to an OpenAPI spec.",
            "version": "1.0",
        },
        "paths": {},
        "components": {"schemas": {}},
    }

    facades = _load_facades_file(facadesFile)

    for facade in facades:
        for method_name in facade["Schema"]["properties"]:
            # Grab the actual object representing the facade call
            method = facade["Schema"]["properties"][method_name]
            facade_name = facade["Name"].lower()
            method_name = _lower_first(method_name)

            # Generate the "path" object for the OpenAPI spec
            path = {
                "get": {
                    "tags": [facade_name],
                    "description": _clean_description(method.get("description", "")),
                    "operationId": method_name,
                }
            }

            # Grab any facade method parameters from the spec, add them to the
            # path object
            facade_call_params = method.get("properties", {}).get("Params", {})
            if facade_call_params:
                path["get"]["requestBody"] = {
                    "content": {"application/json": {"schema": facade_call_params}},
                    "required": True,
                }

            # Grab any facade method results from the spec, add them to the
            # path object
            facade_call_result = method.get("properties", {}).get("Result", {})
            if facade_call_result:
                path["get"]["responses"] = {
                    "200": {
                        "description": "",
                        "content": {"application/json": {"schema": facade_call_result}},
                    }
                }

            # Add the new path object to the spec at `/<facade_name>/<method_name>`
            spec["paths"][f"/{facade_name}/{method_name}"] = path

        # Grab any object schema definitions from the facade
        definitions = facade["Schema"].get("definitions", [])
        for component_name in definitions:
            component = facade["Schema"]["definitions"][component_name]
            spec["components"]["schemas"][f"{component_name}"] = component

    return spec


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Juju schema.json -> OpenAPI converter")
    parser.add_argument(
        "-o",
        "--output",
        required=True,
        help="destination file for the generated spec.",
    )
    parser.add_argument(
        "-i",
        "--input",
        required=True,
        help="a generated juju facade schema.",
    )
    args = parser.parse_args()

    spec = _generate_spec(args.input)

    with open(args.output, "w+") as f:
        f.write(yaml.safe_dump(spec, sort_keys=False))
